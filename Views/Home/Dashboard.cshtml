@model DashboardModal;

@{
    ViewData["Title"] = "Dashboard";
}

@section style {
    <style>
        .box {
            min-height: 140px;
            height: 20vh;
            max-height: 200px;
            max-width: 320px;
            width: 20vw;
            min-width: 250px;
        }

        .box {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

            .box i {
                color: #009cff;
            }

            .box:hover, .box:hover h4, .box:hover i {
                background-color: #009cff !important;
                color: aliceblue !important;
            }

        .flex-center {
            display: flex;
            justify-content: space-evenly;
            align-items: center;
            text-align: center;
        }

        #combineChart, #logsChart, #employeeStatusChart, #projectStatusChart, #logsChart {
            max-height: 320px !important;
        }

    </style>
}


@* welcome message *@
<div class="container-fluid pt-3">
    <h3>Welcome, Admin! </h3>
    <h6>
        Allocate resources strategically and achieve project milestones with precision.
    </h6>
</div>


@* cards *@
<div class="container-fluid pt-4">
    <div class="row g-4 d-flex align-items-center justify-content-evenly">
        <div class="col-sm-6 col-xl-3 px-0">
            <div class="bg-light rounded d-flex align-items-center justify-content-between p-5 box">
                <i class="fa fa-chart-line fa-3x"></i>
                <div>
                    <p class="mb-2">Total Projects</p>
                    <h4 class="mb-0">@Model.Projects.Data.Last()</h4>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-xl-3  px-0">
            <div class="bg-light rounded d-flex align-items-center justify-content-between p-5 box">
                <i class="fa fa-chart-bar fa-3x"></i>
                <div>
                    <p class="mb-2">Total Employees</p>
                    <h4 class="mb-0">@Model.Employees.Data.Last()</h4>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-xl-3  px-0">
            <div class="bg-light rounded d-flex align-items-center justify-content-between p-5 box">
                <i class="fa fa-chart-area fa-3x"></i>
                <div>
                    <p class="mb-2">Total Departments</p>
                    <h4 class="mb-0">@Model.Departments.Data.Last()</h4>
                </div>
            </div>
        </div>
    </div>
</div>


@* charts *@
<div class="container-fluid pt-5">
    <h6 style="text-align:center;">Explore insightful charts to visualize resource allocation and optimize project planning.</h6>
    <div class="row g-4 pt-1">
        <div class="col-sm-12 col-xl-12">
            <div class="bg-light rounded h-100 p-4">
                <h6 class="mb-4">Project Resource Mapping System</h6>
                <canvas id="combineChart"></canvas>
            </div>
        </div>
        @* <div class="col-sm-12 col-xl-6">
            <div class="bg-light rounded h-100 p-4">
                <h6 class="mb-4">Projects</h6>
                <canvas id="projectsChart"></canvas>
            </div>
        </div>
        <div class="col-sm-12 col-xl-6">
            <div class="bg-light rounded h-100 p-4">
                <h6 class="mb-4">Employees</h6>
                <canvas id="employeesChart"></canvas>
            </div>
        </div>
        <div class="col-sm-12 col-xl-6">
            <div class="bg-light rounded h-100 p-4">
                <h6 class="mb-4">Departments</h6>
                <canvas id="departmentsChart"></canvas>
            </div>
        </div> *@
        <div class="col-sm-12 col-xl-12">
            <div class="bg-light rounded h-100 p-4">
                <h6 class="mb-4">Projects Status</h6>
                <canvas id="projectStatusChart"></canvas>
            </div>
        </div>
        <div class="col-sm-12 col-xl-12">
            <div class="bg-light rounded h-100 p-4">
                <h6 class="mb-4">Employees Status</h6>
                <canvas id="employeeStatusChart"></canvas>
            </div>
        </div>
        <div class="col-sm-12 col-xl-6">
            <div class="bg-light rounded h-100 p-4">
                <h6 class="mb-4">Department wise Projects</h6>
                <canvas id="departmentProjectChart"></canvas>
            </div>
        </div>
        <div class="col-sm-12 col-xl-6">
            <div class="bg-light rounded h-100 p-4">
                <h6 class="mb-4">Department wise Employees</h6>
                <canvas id="departmentEmployeeChart"></canvas>
            </div>
        </div>
        <div class="col-sm-12 col-xl-12">
            <div class="bg-light rounded h-100 p-4">
                <h6 class="mb-4">Actions </h6>
                <canvas id="logsChart"></canvas>
            </div>
        </div>
    </div>
</div>


@section scripts {
    <script>
        $(document).ready(function () {
            var employeesLabel = @Html.Raw(Json.Serialize(Model.Employees.Label));
            var employeesData = @Html.Raw(Json.Serialize(Model.Employees.Data));
            var projectsLabel = @Html.Raw(Json.Serialize(Model.Projects.Label));
            var projectsData = @Html.Raw(Json.Serialize(Model.Projects.Data));
            var departmentsLabel = @Html.Raw(Json.Serialize(Model.Departments.Label));
            var departmentsData = @Html.Raw(Json.Serialize(Model.Departments.Data));
            var departmentProjecLable = @Html.Raw(Json.Serialize(Model.DepartmentProject.Label));
            var departmentProjectData = @Html.Raw(Json.Serialize(Model.DepartmentProject.Data));
            var departmentEmployeeLable = @Html.Raw(Json.Serialize(Model.DepartmentEmployee.Label));
            var departmentEmployeeData = @Html.Raw(Json.Serialize(Model.DepartmentEmployee.Data));
            var dateLable = @Html.Raw(Json.Serialize(Model.Inserts.Label));
            var insertData = @Html.Raw(Json.Serialize(Model.Inserts.Data));
            var updatetData = @Html.Raw(Json.Serialize(Model.Updates.Data));
            var deleteData = @Html.Raw(Json.Serialize(Model.Deletes.Data));
            var DepartmentLable = @Html.Raw(Json.Serialize(Model.RunningProjects.Label));
            var runningProjects = @Html.Raw(Json.Serialize(Model.RunningProjects.Data));
            var pendingProjects = @Html.Raw(Json.Serialize(Model.PendingProjects.Data));
            var completedProjects = @Html.Raw(Json.Serialize(Model.CompletedProjects.Data));
            var DepartmentLable2 = @Html.Raw(Json.Serialize(Model.AllocatdeEmployees.Label));
            var allocatedEmployees = @Html.Raw(Json.Serialize(Model.AllocatdeEmployees.Data));
            var unAllocatedEmployees = @Html.Raw(Json.Serialize(Model.UnallocatedEmployees.Data));


            var projects = {
                labels: projectsLabel,
                datasets: [{
                    label: "Projects",
                    data: projectsData,
                    backgroundColor: ["rgba(0, 255, 0, 0.2)"],
                    borderColor: ["rgba(0, 255, 0, 1)"],
                    borderWidth: 1
                }]
            };

            var employees = {
                labels: employeesLabel,
                datasets: [{
                    label: "Employees",
                    data: employeesData,
                    backgroundColor: ["rgba(255, 0, 0, 0.2)"],
                    borderColor: ["rgba(255, 0, 0, 1)"],
                    borderWidth: 1
                }]
            };

            var departments = {
                labels: departmentsLabel,
                datasets: [{
                    label: "Departments",
                    data: departmentsData,
                    backgroundColor: ["rgba(0, 0, 255, 0.2)"],
                    borderColor: ["rgba(0, 0, 255, 1)"],
                    borderWidth: 1
                }]
            };

            var combine = {
                labels: departmentsLabel,
                datasets: [{
                    label: "Employees",
                    data: employeesData,
                    backgroundColor: ["rgba(255, 0, 0, 0.2)"],
                    borderColor: ["rgba(255, 0, 0, 1)"],
                    borderWidth: 1
                }, {
                    label: "Projects",
                    data: projectsData,
                    backgroundColor: ["rgba(0, 255, 0, 0.2)"],
                    borderColor: ["rgba(0, 255, 0, 1)"],
                    borderWidth: 1
                }, {
                    label: "Departments",
                    data: departmentsData,
                    backgroundColor: ["rgba(0, 0, 255, 0.2)"],
                    borderColor: ["rgba(0, 0, 255, 1)"],
                    borderWidth: 1
                }]
            };

            var logs = {
                labels: dateLable,
                datasets: [{
                    label: "Inserts",
                    data: insertData,
                    backgroundColor: ["rgba(0, 255, 0, 0.2)"],
                    borderColor: ["rgba(0, 255, 0, 1)"],
                    borderWidth: 1
                }, {
                    label: "Updates",
                    data: updatetData,
                    backgroundColor: ["rgba(0, 0, 255, 0.2)"],
                    borderColor: ["rgba(0, 0, 255, 1)"],
                    borderWidth: 1
                }, {
                    label: "Deletes",
                    data: deleteData,
                    backgroundColor: ["rgba(255, 0, 0, 0.2)"],
                    borderColor: ["rgba(255, 0, 0, 1)"],
                    borderWidth: 1
                }]
            };

            var projectStatus = {
                labels: DepartmentLable,
                datasets: [{
                    label: "Pending Projects",
                    data: pendingProjects,
                    backgroundColor: ["rgba(0, 255, 0, 0.2)"],
                    borderColor: ["rgba(0, 255, 0, 1)"],
                    borderWidth: 1
                }, {
                    label: "Running Projects",
                    data: runningProjects,
                    backgroundColor: ["rgba(0, 0, 255, 0.2)"],
                    borderColor: ["rgba(0, 0, 255, 1)"],
                    borderWidth: 1
                }, {
                    label: "Completed Projects",
                    data: completedProjects,
                    backgroundColor: ["rgba(255, 0, 0, 0.2)"],
                    borderColor: ["rgba(255, 0, 0, 1)"],
                    borderWidth: 1
                }]
            };

            var employeeStatus = {
                labels: DepartmentLable2,
                datasets: [{
                    label: "Allocated Employees",
                    data: allocatedEmployees,
                    backgroundColor: ["rgba(0, 255, 0, 0.2)"],
                    borderColor: ["rgba(0, 255, 0, 1)"],
                    borderWidth: 1
                }, {
                    label: "Unallocated Employees",
                    data: unAllocatedEmployees,
                    backgroundColor: ["rgba(0, 0, 255, 0.2)"],
                    borderColor: ["rgba(0, 0, 255, 1)"],
                    borderWidth: 1
                }]
            };

            // random color
            function getRandomColor() {
                var letters = '01234ABCDE';
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 9)];
                }
                return color;
            }

            var departmentProject = {
                labels: departmentProjecLable,
                datasets: [{
                    label: "Projects",
                    data: departmentProjectData,
                    backgroundColor: [],
                    borderColor: [],
                    borderWidth: 0
                }]
            };
            var departmentEmployee = {
                labels: departmentEmployeeLable,
                datasets: [{
                    label: "Employees",
                    data: departmentEmployeeData,
                    backgroundColor: [],
                    borderColor: [],
                    borderWidth: 0
                }]
            };
            // add random color in list
            departmentProject.labels.forEach(function (label, index) {
                departmentProject.datasets[0].backgroundColor.push(getRandomColor());
                departmentProject.datasets[0].borderColor.push(getRandomColor());
            });
            departmentEmployee.labels.forEach(function (label, index) {
                departmentEmployee.datasets[0].backgroundColor.push(getRandomColor());
                departmentEmployee.datasets[0].borderColor.push(getRandomColor());
            });

            var totalDepartmentProject = departmentProject.datasets[0].data.reduce((a, b) => a + b, 0);
            departmentProject.labels.forEach((label, index) => {
                var percentage = ((departmentProject.datasets[0].data[index] / totalDepartmentProject) * 100).toFixed(2) + "%";
                departmentProject.labels[index] = label + " (" + percentage + ")";
            });

            var totalDepartmentEmployee = departmentEmployee.datasets[0].data.reduce((a, b) => a + b, 0);
            departmentEmployee.labels.forEach((label, index) => {
                var percentage = ((departmentEmployee.datasets[0].data[index] / totalDepartmentEmployee) * 100).toFixed(2) + "%";
                departmentEmployee.labels[index] = label + " (" + percentage + ")";
            });

            // var employeesCtx = document.getElementById("employeesChart").getContext("2d");
            // var projectsCtx = document.getElementById("projectsChart").getContext("2d");
            // var departmentsCtx = document.getElementById("departmentsChart").getContext("2d");
            var combineCtx = document.getElementById("combineChart").getContext("2d");
            var logsCtx = document.getElementById("logsChart").getContext("2d");
            var departmentProjectCtx = document.getElementById("departmentProjectChart").getContext("2d");
            var departmentEmployeeCtx = document.getElementById("departmentEmployeeChart").getContext("2d");
            var projectStatusCtx = document.getElementById("projectStatusChart").getContext("2d");
            var employeeStatusCtx = document.getElementById("employeeStatusChart").getContext("2d");

            // Create different types of charts
            // var employeesChart = new Chart(employeesCtx, {
            //     type: "line",
            //     data: employees
            // });
            // var projectsChart = new Chart(projectsCtx, {
            //     type: "line",
            //     data: projects
            // });
            // var departmentsChart = new Chart(departmentsCtx, {
            //     type: "line",
            //     data: departments
            // });
            var combineChart = new Chart(combineCtx, {
                type: "line",
                data: combine
            });
            

            var departmentProjectChart = new Chart(departmentProjectCtx, {
                type: "doughnut",
                data: departmentProject,
                options: {
                    cutoutPercentage: 80, // Adjust as needed
                    animation: {
                        animateScale: true
                    },
                    legend: {
                        display: true,
                        position: 'bottom',
                        labels: {
                            generateLabels: function (chart) {
                                return chart.data.labels.map(function (label, index) {
                                    return {
                                        text: label,
                                        fillStyle: chart.data.datasets[0].backgroundColor[index],
                                        hidden: isNaN(chart.data.datasets[0].data[index]) || chart.data.datasets[0].data[index] === 0
                                    };
                                });
                            }
                        }
                    }
                }
            });

            var departmentEmployeeChart = new Chart(departmentEmployeeCtx, {
                type: "doughnut",
                data: departmentEmployee,
                options: {
                    cutoutPercentage: 80, // Adjust as needed
                    animation: {
                        animateScale: true
                    },
                    legend: {
                        display: true,
                        position: 'bottom',
                        labels: {
                            generateLabels: function (chart) {
                                return chart.data.labels.map(function (label, index) {
                                    return {
                                        text: label,
                                        fillStyle: chart.data.datasets[0].backgroundColor[index],
                                        hidden: isNaN(chart.data.datasets[0].data[index]) || chart.data.datasets[0].data[index] === 0
                                    };
                                });
                            }
                        }
                    }
                }
            });

            var logsChart = new Chart(logsCtx, {
                type: "bar",
                data: logs,
            });

            var projectStatusChart = new Chart(projectStatusCtx, {
                type: "bar",
                data: projectStatus
            });

            var employeeStatusChart = new Chart(employeeStatusCtx, {
                type: "bar",
                data: employeeStatus
            });
           
        });


    </script>
}